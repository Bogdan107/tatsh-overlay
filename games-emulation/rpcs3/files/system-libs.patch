diff --git a/3rdparty/CMakeLists.txt b/3rdparty/CMakeLists.txt
index c91c18f7b..38e096bad 100644
--- a/3rdparty/CMakeLists.txt
+++ b/3rdparty/CMakeLists.txt
@@ -56,12 +56,21 @@ endif()
 
 
 # pugixml
-add_subdirectory(pugixml EXCLUDE_FROM_ALL)
+if (USE_SYSTEM_PUGIXML)
+	find_package(pugixml REQUIRED)
+else()
+	add_subdirectory(pugixml EXCLUDE_FROM_ALL)
+endif()
 
 
 # hidapi
-add_library(3rdparty_hidapi INTERFACE)
-target_include_directories(3rdparty_hidapi INTERFACE hidapi/hidapi)
+if (USE_SYSTEM_HIDAPI)
+	pkg_check_modules(HIDAPI_LIBUSB REQUIRED hidapi-libusb)
+	pkg_check_modules(HIDAPI_HIDRAW REQUIRED hidapi-hidraw)
+else()
+	add_library(3rdparty_hidapi INTERFACE)
+	target_include_directories(3rdparty_hidapi INTERFACE hidapi/hidapi)
+endif()
 
 if(APPLE)
 	add_subdirectory(hidapi/mac EXCLUDE_FROM_ALL)
@@ -69,10 +78,12 @@ if(APPLE)
 
 	target_link_libraries(3rdparty_hidapi INTERFACE hidapi-mac "-framework CoreFoundation" "-framework IOKit")
 elseif(CMAKE_SYSTEM MATCHES "Linux")
-	add_subdirectory(hidapi/linux EXCLUDE_FROM_ALL)
-	target_include_directories(hidapi-hidraw PUBLIC hidapi/hidapi)
+	if (NOT USE_SYSTEM_HIDAPI)
+		add_subdirectory(hidapi/linux EXCLUDE_FROM_ALL)
+		target_include_directories(hidapi-hidraw PUBLIC hidapi/hidapi)
 
-	target_link_libraries(3rdparty_hidapi INTERFACE hidapi-hidraw udev)
+		target_link_libraries(3rdparty_hidapi INTERFACE hidapi-hidraw udev)
+	endif()
 elseif(WIN32)
 	add_subdirectory(hidapi/windows EXCLUDE_FROM_ALL)
 	target_include_directories(hidapi-hid PUBLIC hidapi/hidapi)
@@ -96,7 +107,11 @@ set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/yaml-cpp_install)
 set(YAML_CPP_BUILD_TESTS OFF CACHE BOOL "Enable testing" FORCE)
 set(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "Enable parse tools" FORCE)
 set(YAML_CPP_BUILD_CONTRIB OFF CACHE BOOL "Enable contrib stuff in library" FORCE)
-add_subdirectory(yaml-cpp EXCLUDE_FROM_ALL)
+if (USE_SYSTEM_YAMLCPP)
+	find_package(yaml-cpp REQUIRED)
+else()
+	add_subdirectory(yaml-cpp EXCLUDE_FROM_ALL)
+endif()
 
 set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX_OLD})
 
@@ -104,13 +119,21 @@ set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX_OLD})
 # xxHash
 set(XXHASH_BUNDLED_MODE ON)
 set(BUILD_SHARED_LIBS OFF CACHE BOOL "Make xxHash build static libs")
-add_subdirectory(xxHash/cmake_unofficial EXCLUDE_FROM_ALL)
-target_include_directories(xxhash INTERFACE xxHash)
-
+if (USE_SYSTEM_XXHASH)
+	find_library(XXHASH_LIBRARIES xxhash PATHS /usr/lib)
+	find_path(XXHASH_INCLUDE NAMES xxhash.h PATHS /usr/include)
+else()
+	add_subdirectory(xxHash/cmake_unofficial EXCLUDE_FROM_ALL)
+	target_include_directories(xxhash INTERFACE xxHash)
+endif()
 
 # cereal
-add_library(3rdparty_cereal INTERFACE)
-target_include_directories(3rdparty_cereal INTERFACE cereal/include)
+if (USE_SYSTEM_CEREAL)
+	find_path(CEREAL_INCLUDE NAMES cereal.hpp PATHS /usr/include/cereal)
+else()
+	add_library(3rdparty_cereal INTERFACE)
+	target_include_directories(3rdparty_cereal INTERFACE cereal/include)
+endif()
 
 
 # OpenGL
@@ -139,8 +162,12 @@ endif()
 
 
 # GSL
-add_library(3rdparty_gsl INTERFACE)
-target_include_directories(3rdparty_gsl INTERFACE GSL/include)
+if (USE_SYSTEM_GSL)
+	find_path(GSL_INCLUDE_DIR NAMES gsl PATHS /usr/include/gsl)
+else()
+	add_library(3rdparty_gsl INTERFACE)
+	target_include_directories(3rdparty_gsl INTERFACE GSL/include)
+endif()
 
 
 # stblib
@@ -173,7 +200,8 @@ if (USE_DISCORD_RPC AND (WIN32 OR CMAKE_SYSTEM MATCHES "Linux" OR APPLE))
 			find_library(DISCORD_RPC_LIB discord-rpc PATHS discord-rpc/lib/ NO_DEFAULT_PATH)
 		endif()
 	elseif(CMAKE_SYSTEM MATCHES "Linux")
-		find_library(DISCORD_RPC_LIB discord-rpc-linux PATHS discord-rpc/lib/ NO_DEFAULT_PATH)
+		find_library(DISCORD_RPC_LIB discord-rpc HINTS /usr/lib)
+		message(STATUS "discord-rpc : ${DISCORD_RPC_LIB}")
 	elseif(APPLE)
 		find_library(DISCORD_RPC_LIB discord-rpc-mac PATHS discord-rpc/lib/ NO_DEFAULT_PATH)
 	endif()
@@ -243,7 +271,7 @@ if(USE_VULKAN)
 
 		if(UNIX AND NOT APPLE)
 			find_package(Wayland)
-			if (WAYLAND_FOUND)
+			if (WAYLAND_FOUND AND USE_WAYLAND)
 				target_include_directories(3rdparty_vulkan
 					INTERFACE ${WAYLAND_INCLUDE_DIR})
 
@@ -330,11 +358,8 @@ endif()
 
 
 # GLEW
-add_library(3rdparty_glew INTERFACE)
-if(NOT MSVC)
-	find_package(GLEW 1.13.0 REQUIRED)
-	target_link_libraries(3rdparty_glew INTERFACE GLEW::GLEW)
-endif()
+find_package(GLEW REQUIRED)
+#add_library(3rdparty_glew INTERFACE)
 
 
 # LLVM
@@ -343,10 +368,10 @@ include(llvm.cmake)
 
 # add nice ALIAS targets for ease of use
 add_library(3rdparty::zlib ALIAS 3rdparty_zlib)
-add_library(3rdparty::pugixml ALIAS pugixml)
-add_library(3rdparty::yaml-cpp ALIAS yaml-cpp)
-add_library(3rdparty::xxhash ALIAS xxhash)
-add_library(3rdparty::hidapi ALIAS 3rdparty_hidapi)
+#add_library(3rdparty::pugixml ALIAS pugixml)
+#add_library(3rdparty::yaml-cpp ALIAS yaml-cpp)
+#add_library(3rdparty::xxhash ALIAS xxhash)
+#add_library(3rdparty::hidapi ALIAS 3rdparty_hidapi)
 add_library(3rdparty::libpng ALIAS ${LIBPNG_TARGET})
 add_library(3rdparty::cereal ALIAS 3rdparty_cereal)
 add_library(3rdparty::opengl ALIAS 3rdparty_opengl)
@@ -360,4 +385,4 @@ add_library(3rdparty::vulkan ALIAS ${VULKAN_TARGET})
 add_library(3rdparty::openal ALIAS 3rdparty_openal)
 add_library(3rdparty::ffmpeg ALIAS 3rdparty_ffmpeg)
 add_library(3rdparty::dx12 ALIAS 3rdparty_dx12)
-add_library(3rdparty::glew ALIAS 3rdparty_glew)
+#add_library(3rdparty::glew ALIAS 3rdparty_glew)
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 37ba0da32..e86c27795 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -57,7 +57,12 @@ if(APPLE)
 endif()
 
 add_subdirectory(Vulkan EXCLUDE_FROM_ALL)
-add_subdirectory(asmjitsrc EXCLUDE_FROM_ALL)
+if(USE_SYSTEM_ASMJIT)
+  find_library(ASMJIT_LIBRARIES asmjit HINTS /usr/lib)
+  find_file(ASMJIT_INCLUDE asmjit.h HINTS /usr/include/asmjit)
+else()
+  add_subdirectory(asmjitsrc EXCLUDE_FROM_ALL)
+endif()
 add_subdirectory(3rdparty)
 
 # TODO: do real installation, including copying directory structure
diff --git a/Vulkan/CMakeLists.txt b/Vulkan/CMakeLists.txt
index 03d681280..049c5abc1 100644
--- a/Vulkan/CMakeLists.txt
+++ b/Vulkan/CMakeLists.txt
@@ -1,4 +1,16 @@
-set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "Skip installation" FORCE)
-set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "Builds glslangValidator and spirv-remap" FORCE)
-set(ENABLE_HLSL OFF CACHE BOOL "Enables HLSL input support" FORCE)
-add_subdirectory(glslang)
+if(USE_SYSTEM_GLSLANG)
+  find_file(GLSLANG_LIBRARY
+    NAMES libglslang.a
+    HINTS /usr/lib)
+  find_file(GLSLANG_LIBRARY_HLSL NAMES libHLSL.a HINTS /usr/lib)
+  find_file(GLSLANG_LIBRARY_OGLCOMPILER NAMES libOGLCompiler.a HINTS /usr/lib)
+  find_file(GLSLANG_LIBRARY_OSDEPENDENT NAMES libOSDependent.a HINTS /usr/lib)
+  find_file(GLSLANG_LIBRARY_SPIRV NAMES libSPIRV.a HINTS /usr/lib)
+  find_file(GLSLANG_LIBRARY_SPVREMAPPER NAMES libSPVRemapper.a HINTS /usr/lib)
+  find_file(GLSLANG_INCLUDE ShaderLang.h HINTS /usr/include/glslang/Public)
+else()
+  set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "Skip installation" FORCE)
+  set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "Builds glslangValidator and spirv-remap" FORCE)
+  set(ENABLE_HLSL OFF CACHE BOOL "Enables HLSL input support" FORCE)
+  add_subdirectory(glslang)
+endif()
diff --git a/asmjitsrc/CMakeLists.txt b/asmjitsrc/CMakeLists.txt
index e2429d116..63ce3473a 100644
--- a/asmjitsrc/CMakeLists.txt
+++ b/asmjitsrc/CMakeLists.txt
@@ -1,3 +1,4 @@
+if (NOT USE_SYSTEM_ASMJIT)
 set(ASMJIT_EMBED TRUE)
 set(ASMJIT_STATIC TRUE)
 set(ASMJIT_BUILD_X86 TRUE)
@@ -10,6 +11,7 @@ include("${ASMJIT_DIR}/CMakeLists.txt")
 add_library(asmjit ${ASMJIT_SRC})
 target_include_directories(asmjit PUBLIC ${ASMJIT_DIR}/src)
 target_link_libraries(asmjit PRIVATE ${ASMJIT_DEPS})
+endif()
 
 # ASMJIT should have a option for disabling installing and this wouldnt
 # be required to avoid installing ASMJIT...
diff --git a/rpcs3/CMakeLists.txt b/rpcs3/CMakeLists.txt
index d08771780..935f9530b 100644
--- a/rpcs3/CMakeLists.txt
+++ b/rpcs3/CMakeLists.txt
@@ -60,8 +60,9 @@ set_target_properties(rpcs3
 		AUTOMOC ON
 		AUTOUIC ON)
 
+target_include_directories(rpcs3 PUBLIC "${GLEW_INCLUDE_DIRS}")
 target_link_libraries(rpcs3 rpcs3_emu rpcs3_ui)
-target_link_libraries(rpcs3 3rdparty::discord-rpc 3rdparty::qt5 3rdparty::hidapi)
+target_link_libraries(rpcs3 discord-rpc 3rdparty::qt5 hidapi-libusb hidapi-hidraw GLEW "${GLSLANG_LIBRARY}" "${GLSLANG_LIBRARY_HLSL}" "${GLSLANG_LIBRARY_OGLCOMPILER}" "${GLSLANG_LIBRARY_OSDEPENDENT}" "${GLSLANG_LIBRARY_SPIRV}" "${GLSLANG_LIBRARY_SPVREMAPPER}")
 target_link_libraries(rpcs3 ${ADDITIONAL_LIBS})
 
 # Win resource file
diff --git a/rpcs3/Emu/CMakeLists.txt b/rpcs3/Emu/CMakeLists.txt
index 8c9997b80..371d838b5 100644
--- a/rpcs3/Emu/CMakeLists.txt
+++ b/rpcs3/Emu/CMakeLists.txt
@@ -4,7 +4,7 @@ add_library(rpcs3_emu ${SRC_FILES})
 
 target_link_libraries(rpcs3_emu
 	PRIVATE
-		3rdparty::zlib 3rdparty::yaml-cpp
+		3rdparty::zlib yaml-cpp
 	PUBLIC
 		3rdparty::libevdev)
 
@@ -22,7 +22,7 @@ target_include_directories(rpcs3_emu PUBLIC "${CMAKE_SOURCE_DIR}")
 
 target_link_libraries(rpcs3_emu
 	PUBLIC
-		3rdparty::pugixml
+		pugixml
 		3rdparty::gsl)
 
 set_source_files_properties("../../Utilities/JIT.cpp" PROPERTIES COMPILE_FLAGS -fno-rtti)
@@ -73,7 +73,7 @@ file(GLOB_RECURSE CPU_SRC_FILES "CPU/*.cpp")
 target_sources(rpcs3_emu PRIVATE ${CPU_SRC_FILES})
 
 target_link_libraries(rpcs3_emu
-	PUBLIC 3rdparty::llvm 3rdparty::asmjit)
+	PUBLIC 3rdparty::llvm asmjit)
 
 
 # Io
@@ -111,10 +111,10 @@ target_link_libraries(rpcs3_emu
 	PUBLIC
 		3rdparty::ffmpeg 3rdparty::cereal
 		3rdparty::opengl 3rdparty::stblib
-		3rdparty::vulkan
+		3rdparty::vulkan "${GLEW_LIBRARIES}"
 	PRIVATE
-		3rdparty::gsl 3rdparty::xxhash
-		3rdparty::dx12 3rdparty::glew)
+		3rdparty::gsl xxhash
+		3rdparty::dx12)
 
 
 # Setup cotire
diff --git a/rpcs3/ds4_pad_handler.cpp b/rpcs3/ds4_pad_handler.cpp
index 9fd08d07f..73893de0e 100644
--- a/rpcs3/ds4_pad_handler.cpp
+++ b/rpcs3/ds4_pad_handler.cpp
@@ -717,7 +717,7 @@ int ds4_pad_handler::SendVibrateData(const std::shared_ptr<DS4Device>& device)
 		outputBuf[76] = (crcCalc >> 16) & 0xFF;
 		outputBuf[77] = (crcCalc >> 24) & 0xFF;
 
-		return hid_write_control(device->hidDevice, outputBuf.data(), DS4_OUTPUT_REPORT_0x11_SIZE);
+		return hid_write(device->hidDevice, outputBuf.data(), DS4_OUTPUT_REPORT_0x11_SIZE);
 	}
 	else
 	{
@@ -903,7 +903,7 @@ void ds4_pad_handler::ThreadProc()
 			continue;
 		}
 
-		// Attempt to send rumble no matter what 
+		// Attempt to send rumble no matter what
 		int idx_l = profile->switch_vibration_motors ? 1 : 0;
 		int idx_s = profile->switch_vibration_motors ? 0 : 1;
 
diff --git a/rpcs3/ds4_pad_handler.h b/rpcs3/ds4_pad_handler.h
index c2b1dfc46..97ec04ac4 100644
--- a/rpcs3/ds4_pad_handler.h
+++ b/rpcs3/ds4_pad_handler.h
@@ -3,7 +3,7 @@
 #include "Emu/Io/PadHandler.h"
 #include "Utilities/Thread.h"
 #include "Utilities/CRC.h"
-#include "hidapi.h"
+#include "hidapi/hidapi.h"
 #include <limits>
 #include <unordered_map>
 
diff --git a/rpcs3/rpcs3qt/CMakeLists.txt b/rpcs3/rpcs3qt/CMakeLists.txt
index 93a655791..d30fb6e2f 100644
--- a/rpcs3/rpcs3qt/CMakeLists.txt
+++ b/rpcs3/rpcs3qt/CMakeLists.txt
@@ -17,11 +17,11 @@ set_target_properties(rpcs3_ui
 
 target_link_libraries(rpcs3_ui
 	PUBLIC
-		3rdparty::qt5 3rdparty::yaml-cpp
+		3rdparty::qt5 yaml-cpp
 
 	PRIVATE
 		rpcs3_emu
-		3rdparty::zlib 3rdparty::pugixml
+		3rdparty::zlib pugixml
 		3rdparty::discord-rpc
-		3rdparty::hidapi)
+		hidapi-libusb)
 
