diff -urN cctools-806-old/include/stuff/arch.h cctools-806/include/stuff/arch.h
--- cctools-806-old/include/stuff/arch.h	2008-06-20 17:47:16.000000000 -0500
+++ cctools-809/include/stuff/arch.h	2011-09-07 01:45:04.000000000 -0500
@@ -23,8 +23,8 @@
 #ifndef _STUFF_ARCH_H_
 #define _STUFF_ARCH_H_
 
-#if defined(__MWERKS__) && !defined(__private_extern__)
-#define __private_extern__ __declspec(private_extern)
+#if defined(__MWERKS__) && !defined(extern)
+#define extern __declspec(private_extern)
 #endif
 /*
  * This file contains the current known set of flags and constants for the
@@ -49,7 +49,7 @@
  * If the pointer to the arch_flag is not NULL it is filled in with the
  * arch_flag struct that matches the name.
  */
-__private_extern__ int get_arch_from_flag(
+extern int get_arch_from_flag(
     char *name,
     struct arch_flag *arch_flag);
 
@@ -61,7 +61,7 @@
  * architecture and specific architecure for the host.  If the architecture
  * is unknown and the parameters are not NULL then all fields are set to zero.
  */
-__private_extern__ int get_arch_from_host(
+extern int get_arch_from_host(
     struct arch_flag *family_arch_flag,
     struct arch_flag *specific_arch_flag);
 
@@ -69,14 +69,14 @@
  * get_arch_flags() returns a pointer to an array of all currently know
  * architecture flags (terminated with an entry with all zeros).
  */
-__private_extern__ const struct arch_flag *get_arch_flags(
+extern const struct arch_flag *get_arch_flags(
     void);
 
 /*
  * arch_usage() is called when an unknown architecture flag is encountered.
  * It prints the currently know architecture flags on stderr.
  */
-__private_extern__ void arch_usage(
+extern void arch_usage(
     void);
 
 /*
@@ -85,7 +85,7 @@
  * the routines in "allocate.h" and errors are handled by the routines in
  * "error.h".
  */
-__private_extern__ void set_arch_flag_name(
+extern void set_arch_flag_name(
     struct arch_flag *p);
 
 /*
@@ -93,7 +93,7 @@
  * specified cputype and cpusubtype if known.  If unknown it returns a pointer
  * to the string "unknown".
  */
-__private_extern__ const char *get_arch_name_from_types(
+extern const char *get_arch_name_from_types(
     cpu_type_t cputype,
     cpu_subtype_t cpusubtype);
 
@@ -101,7 +101,7 @@
  * get_arch_family_from_cputype() returns the family architecture for the
  * specified cputype if known.  If unknown it returns NULL.
  */
-__private_extern__ const struct arch_flag *get_arch_family_from_cputype(
+extern const struct arch_flag *get_arch_family_from_cputype(
     cpu_type_t cputype);
 
 /*
@@ -111,7 +111,7 @@
  * of reading a magic number from a file that should be done and this routine
  * should not be used as it could be out of date.
  */
-__private_extern__ enum byte_sex get_byte_sex_from_flag(
+extern enum byte_sex get_byte_sex_from_flag(
     const struct arch_flag *flag);
 
 /*
@@ -119,39 +119,39 @@
  * either positive (+1) or negative (-1) of the architecture for the
  * specified cputype and cpusubtype if known.  If unknown it returns 0.
  */
-__private_extern__ int get_stack_direction_from_flag(
+extern int get_stack_direction_from_flag(
     const struct arch_flag *flag);
 
 /*
  * get_stack_addr_from_flag() returns the default starting address of the user
  * stack.
  */
-__private_extern__ uint64_t get_stack_addr_from_flag(
+extern uint64_t get_stack_addr_from_flag(
     const struct arch_flag *flag);
 
 /*
  * get_stack_size_from_flag() returns the default size of the userstack.
  */
-__private_extern__ uint32_t get_stack_size_from_flag(
+extern uint32_t get_stack_size_from_flag(
     const struct arch_flag *flag);
 
 /*
  * get_segalign_from_flag() returns the default segment alignment (page size).
  */
-__private_extern__ uint32_t get_segalign_from_flag(
+extern uint32_t get_segalign_from_flag(
     const struct arch_flag *flag);
 
 /*
  * get_segprot_from_flag() returns the default segment protection.
  */
-__private_extern__ vm_prot_t get_segprot_from_flag(
+extern vm_prot_t get_segprot_from_flag(
     const struct arch_flag *flag);
 
 /*
  * get_shared_region_size_from_flag() returns the size of the read only shared
  * region.
  */
-__private_extern__ uint32_t get_shared_region_size_from_flag(
+extern uint32_t get_shared_region_size_from_flag(
     const struct arch_flag *flag);
 
 /*
@@ -159,6 +159,6 @@
  * that cputype the cpusubtype should always be forced to the ALL cpusubtype,
  * otherwise it returns FALSE.
  */
-__private_extern__ enum bool force_cpusubtype_ALL_for_cputype(
+extern enum bool force_cpusubtype_ALL_for_cputype(
     cpu_type_t cputype);
 #endif /* _STUFF_ARCH_H_ */
diff -urN cctools-806-old/include/stuff/bytesex.h cctools-806/include/stuff/bytesex.h
--- cctools-806-old/include/stuff/bytesex.h	1969-12-31 18:00:00.000000000 -0600
+++ cctools-809/include/stuff/bytesex.h	2011-09-07 01:45:04.000000000 -0500
@@ -30,7 +30,7 @@
 #define _STUFF_BYTESEX_H_
 
 #if defined(__MWERKS__) && !defined(__private_extern__)
-#define __private_extern__ __declspec(private_extern)
+#define extern __declspec(private_extern)
 #endif
 
 #include <mach-o/fat.h> 
diff -urN cctools-806-old/ld/ld.h cctools-806/ld/ld.h
--- cctools-806-old/ld/ld.h	2009-12-16 13:36:25.000000000 -0600
+++ cctools-809/ld/ld.h	2011-09-07 01:45:04.000000000 -0500
@@ -82,7 +82,7 @@
     WEAK_REFS_MISMATCH_NON_WEAK
 };
 
-__private_extern__ struct macosx_deployment_target macosx_deployment_target;
+extern struct macosx_deployment_target macosx_deployment_target;
 
 /* name of this program as executed (argv[0]) */
 __private_extern__ char *progname;
@@ -107,7 +107,7 @@
  * cputype and cpusubtype.  specific_arch_flag is true if an -arch flag is
  * specified and the flag for a specific implementation of an architecture.
  */
-__private_extern__ struct arch_flag arch_flag;
+extern struct arch_flag arch_flag;
 __private_extern__ enum bool specific_arch_flag;
 
 /*
