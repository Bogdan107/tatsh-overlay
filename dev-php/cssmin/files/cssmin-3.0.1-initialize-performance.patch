Index: source/CssMin.php
===================================================================
--- source/CssMin.php	(revision 167)
+++ source/CssMin.php	(working copy)
@@ -1,5 +1,6 @@
 <?php
 /**
+ * kate: replace-tabs false;
  * CssMin - A (simple) css minifier with benefits
  * 
  * --
@@ -38,8 +39,83 @@
 	 * 
 	 * @var array
 	 */
-	private static $classIndex = array();
+	private static $classIndex = array(
+		'CssError' => 'CssError',
+		'aCssFormatter' => 'aCssFormatter',
+		'CssOtbsFormatter' => 'formatter/CssOtbsFormatter',
+		'CssWhitesmithsFormatter' => 'formatter/CssWhitesmithsFormatter',
+		'CssMinifier' => 'minifier/CssMinifier',
+		'aCssMinifierFilter' => 'minifier/filter/aCssMinifierFilter',
+		'CssConvertLevel3AtKeyframesMinifierFilter' => 'minifier/filter/CssConvertLevel3AtKeyframesMinifierFilter',
+		'CssConvertLevel3PropertiesMinifierFilter' => 'minifier/filter/CssConvertLevel3PropertiesMinifierFilter',
+		'CssImportImportsMinifierFilter' => 'minifier/filter/CssImportImportsMinifierFilter',
+		'CssRemoveCommentsMinifierFilter' => 'minifier/filter/CssRemoveCommentsMinifierFilter',
+		'CssRemoveEmptyAtBlocksMinifierFilter' => 'minifier/filter/CssRemoveEmptyAtBlocksMinifierFilter',
+		'CssRemoveEmptyRulesetsMinifierFilter' => 'minifier/filter/CssRemoveEmptyRulesetsMinifierFilter',
+		'CssRemoveLastDelarationSemiColonMinifierFilter' => 'minifier/filter/CssRemoveLastDelarationSemiColonMinifierFilter',
+		'CssSortRulesetPropertiesMinifierFilter' => 'minifier/filter/CssSortRulesetPropertiesMinifierFilter',
+		'CssVariablesMinifierFilter' => 'minifier/filter/CssVariablesMinifierFilter',
+		'aCssMinifierPlugin' => 'minifier/plugins/aCssMinifierPlugin',
+		'CssCompressColorValuesMinifierPlugin' => 'minifier/plugins/CssCompressColorValuesMinifierPlugin',
+		'CssCompressExpressionValuesMinifierPlugin' => 'minifier/plugins/CssCompressExpressionValuesMinifierPlugin',
+		'CssCompressUnitValuesMinifierPlugin' => 'minifier/plugins/CssCompressUnitValuesMinifierPlugin',
+		'CssConvertFontWeightMinifierPlugin' => 'minifier/plugins/CssConvertFontWeightMinifierPlugin',
+		'CssConvertHslColorsMinifierPlugin' => 'minifier/plugins/CssConvertHslColorsMinifierPlugin',
+		'CssConvertNamedColorsMinifierPlugin' => 'minifier/plugins/CssConvertNamedColorsMinifierPlugin',
+		'CssConvertRgbColorsMinifierPlugin' => 'minifier/plugins/CssConvertRgbColorsMinifierPlugin',
+		'CssUrlPrefixMinifierPlugin' => 'minifier/plugins/cssmin-3.0.1-CssUrlPrefixMinifierPlugin-issue-30',
+		'CssVariablesMinifierPlugin' => 'minifier/plugins/CssVariablesMinifierPlugin',
+		'CssParser' => 'parser/CssParser',
+		'aCssParserPlugin' => 'parser/plugins/aCssParserPlugin',
+		'CssAtCharsetParserPlugin' => 'parser/plugins/CssAtCharsetParserPlugin',
+		'CssAtFontFaceParserPlugin' => 'parser/plugins/CssAtFontFaceParserPlugin',
+		'CssAtImportParserPlugin' => 'parser/plugins/CssAtImportParserPlugin',
+		'CssAtKeyframesParserPlugin' => 'parser/plugins/CssAtKeyframesParserPlugin',
+		'CssAtMediaParserPlugin' => 'parser/plugins/CssAtMediaParserPlugin',
+		'CssAtPageParserPlugin' => 'parser/plugins/CssAtPageParserPlugin',
+		'CssAtVariablesParserPlugin' => 'parser/plugins/CssAtVariablesParserPlugin',
+		'CssCommentParserPlugin' => 'parser/plugins/CssCommentParserPlugin',
+		'CssExpressionParserPlugin' => 'parser/plugins/CssExpressionParserPlugin',
+		'CssRulesetParserPlugin' => 'parser/plugins/CssRulesetParserPlugin',
+		'CssStringParserPlugin' => 'parser/plugins/CssStringParserPlugin',
+		'CssUrlParserPlugin' => 'parser/plugins/CssUrlParserPlugin',
+		'aCssAtBlockEndToken' => 'tokens/aCssAtBlockEndToken',
+		'aCssAtBlockStartToken' => 'tokens/aCssAtBlockStartToken',
+		'aCssDeclarationToken' => 'tokens/aCssDeclarationToken',
+		'aCssRulesetEndToken' => 'tokens/aCssRulesetEndToken',
+		'aCssRulesetStartToken' => 'tokens/aCssRulesetStartToken',
+		'aCssToken' => 'tokens/aCssToken',
+		'CssAtCharsetToken' => 'tokens/CssAtCharsetToken',
+		'CssAtFontFaceDeclarationToken' => 'tokens/CssAtFontFaceDeclarationToken',
+		'CssAtFontFaceEndToken' => 'tokens/CssAtFontFaceEndToken',
+		'CssAtFontFaceStartToken' => 'tokens/CssAtFontFaceStartToken',
+		'CssAtImportToken' => 'tokens/CssAtImportToken',
+		'CssAtKeyframesEndToken' => 'tokens/CssAtKeyframesEndToken',
+		'CssAtKeyframesRulesetDeclarationToken' => 'tokens/CssAtKeyframesRulesetDeclarationToken',
+		'CssAtKeyframesRulesetEndToken' => 'tokens/CssAtKeyframesRulesetEndToken',
+		'CssAtKeyframesRulesetStartToken' => 'tokens/CssAtKeyframesRulesetStartToken',
+		'CssAtKeyframesStartToken' => 'tokens/CssAtKeyframesStartToken',
+		'CssAtMediaEndToken' => 'tokens/CssAtMediaEndToken',
+		'CssAtMediaStartToken' => 'tokens/CssAtMediaStartToken',
+		'CssAtPageDeclarationToken' => 'tokens/CssAtPageDeclarationToken',
+		'CssAtPageEndToken' => 'tokens/CssAtPageEndToken',
+		'CssAtPageStartToken' => 'tokens/CssAtPageStartToken',
+		'CssAtVariablesDeclarationToken' => 'tokens/CssAtVariablesDeclarationToken',
+		'CssAtVariablesEndToken' => 'tokens/CssAtVariablesEndToken',
+		'CssAtVariablesStartToken' => 'tokens/CssAtVariablesStartToken',
+		'CssCommentToken' => 'tokens/CssCommentToken',
+		'CssNullToken' => 'tokens/CssNullToken',
+		'CssRulesetDeclarationToken' => 'tokens/CssRulesetDeclarationToken',
+		'CssRulesetEndToken' => 'tokens/CssRulesetEndToken',
+		'CssRulesetStartToken' => 'tokens/CssRulesetStartToken',
+	);
 	/**
+	 * The path this file is at.
+	 * 
+	 * @var string
+	 */
+	private static $path = NULL;
+	/**
 	 * Parse/minify errors
 	 * 
 	 * @var array
@@ -52,8 +128,10 @@
 	 */
 	private static $isVerbose = false;
 	/**
-	 * {@link http://goo.gl/JrW54 Autoload} function of CssMin.
+	 * Autoload function of CssMin.
 	 * 
+	 * @internal
+	 * 
 	 * @param string $class Name of the class
 	 * @return void
 	 */
@@ -61,7 +139,7 @@
 		{
 		if (isset(self::$classIndex[$class]))
 			{
-			require(self::$classIndex[$class]);
+			require(self::$classIndex[$class] . '.php');
 			}
 		}
 	/**
@@ -83,51 +161,63 @@
 		return count(self::$errors) > 0;
 		}
 	/**
+	 * Returns if the SAPI has an opcode cache enabled.
+	 * 
+	 * @return boolean
+	 */
+	private static function hasOpcodeCache()
+		{
+		$apc              = ini_get('apc.enabled');
+		$eaccelerator     = ini_get('eaccelerator.enable');
+		$mmcache          = ini_get('mmcache.enable');
+		$phpexpress       = function_exists('phpexpress');
+		$xcache           = ini_get('xcache.size') > 0 && ini_get('xcache.cacher');
+		$zend_accelerator = ini_get('zend_accelerator.enabled');
+		$zend_plus        = ini_get('zend_optimizerplus.enable');
+		return $apc || $eaccelerator || $mmcache || $phpexpress || $xcache || $zend_accelerator || $zend_plus;
+		}
+	/**
+	 * Sets the path of the current file.
+	 * 
+	 * @return void
+	 */
+	private static function setPath()
+		{
+		if (!self::$path)
+			{
+			self::$path = realpath(dirname(__FILE__)) . DIRECTORY_SEPARATOR;
+			}
+		}
+	/**
 	 * Initialises CssMin.
 	 * 
 	 * @return void
 	 */
 	public static function initialise()
 		{
-		// Create the class index for autoloading or including
-		$paths = array(dirname(__FILE__));
-		while (list($i, $path) = each($paths))
+		self::setPath();
+		
+		// Simple check to make sure this is not the compiled file
+		if (!is_file(self::$path . 'CssError.php'))
 			{
-			$subDirectorys = glob($path . "*", GLOB_MARK | GLOB_ONLYDIR | GLOB_NOSORT);
-			if (is_array($subDirectorys))
+			return;
+			}
+		
+		if (self::hasOpcodeCache() || !function_exists('spl_autoload_register'))
+			{
+			foreach (self::$classIndex as $path)
 				{
-				foreach ($subDirectorys as $subDirectory)
-					{
-					$paths[] = $subDirectory;
-					}
+				require self::$path . $path . '.php';
 				}
-			$files = glob($path . "*.php", 0);
-			if (is_array($files))
-				{
-				foreach ($files as $file)
-					{
-					$class = substr(basename($file), 0, -4);
-					self::$classIndex[$class] = $file;
-					}
-				}
 			}
-		krsort(self::$classIndex);
-		// Only use autoloading if spl_autoload_register() is available and no __autoload() is defined (because 
-		// __autoload() breaks if spl_autoload_register() is used. 
-		if (function_exists("spl_autoload_register") && !is_callable("__autoload"))
-			{
-			spl_autoload_register(array(__CLASS__, "autoload"));
-			}
-		// Otherwise include all class files
 		else
 			{
-			foreach (self::$classIndex as $class => $file)
+			if (function_exists('__autoload') && !spl_autoload_functions())
 				{
-				if (!class_exists($class))
-					{
-					require_once($file);
-					}
+				throw new Exception('Cannot register autoloader as there appears to be an __autoload function already defined. Please use spl_autoload_register() before including CssMin.php.');
 				}
+			
+			spl_autoload_register(array(__CLASS__, "autoload"));
 			}
 		}
 	/**
